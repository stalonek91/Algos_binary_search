from jovian.pythondsa import evaluate_test_case, evaluate_test_cases

tests = [{'input': {'cards': [13, 11, 10, 7, 4, 3, 1, 0], 'query': 7}, 'output': 3},
 {'input': {'cards': [13, 11, 10, 7, 4, 3, 1, 0], 'query': 1}, 'output': 6},
 {'input': {'cards': [4, 2, 1, -1], 'query': 4}, 'output': 0},
 {'input': {'cards': [3, -1, -9, -127], 'query': -127}, 'output': 3},
 {'input': {'cards': [6], 'query': 6}, 'output': 0},
 {'input': {'cards': [9, 7, 5, 2, -9], 'query': 4}, 'output': -1},
 {'input': {'cards': [], 'query': 7}, 'output': -1},
 {'input': {'cards': [8, 8, 6, 6, 6, 6, 6, 3, 2, 2, 2, 0, 0, 0], 'query': 3},
  'output': 7},
 {'input': {'cards': [8, 8, 6, 6, 6, 6, 6, 6, 3, 2, 2, 2, 0, 0, 0],
   'query': 6},
  'output': 2}]


test =   {'input': {'cards': [13, 11, 10, 7, 4, 3, 1, 0], 'query': 7}, 'output': 3}


            
        
# BINARY SEARCH
def test_location(cards, query, mid):
    mid_number = cards[mid]
    # print(f'mid: {mid}, mid_number: {mid_number}')
    if mid_number == query:
        if mid-1 >= 0 and cards[mid-1] == query:
            return 'left'
        else:
            return 'found'
    elif mid_number < query:
        return 'left'
    else:
        return 'right'



def proper_solution(cards, query):
    lo = 0
    hi = len(cards) - 1

    while lo <= hi:
        # print(f"lo: {lo}, hi: {hi}")
        mid = (lo + hi) // 2
        result = test_location(cards, query,mid)

        if result == 'found':
            return mid
        elif result == 'left':
            hi = mid - 1
        elif result == 'right':
            lo = mid + 1
    return -1

# #Linear Search moje

# def linear_solution(cards, query):
    
#     for position in cards:
#         if position == query:
#             return cards.index(position)
#     return -1

def linear_good(cards, query):
    position = 0

    while position < len(cards):
        if cards[position] == query:
            return position
        position += 1
    return -1
    



large_test ={
    'input': {
        'cards' : list(range(10000000, 0, -1)),
        'query' : 2
    },
    'output': 9999998
    }
        
result, passed, runtime = evaluate_test_case(linear_good, large_test, display=False)
print(f'Result:{result}, pasedd:{passed}, runtime:{runtime}')
result, passed, runtime = evaluate_test_case(proper_solution, large_test, display=False)
print(f'Result:{result}, pasedd:{passed}, runtime:{runtime}')